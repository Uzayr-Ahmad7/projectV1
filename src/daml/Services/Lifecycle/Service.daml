module Services.Lifecycle.Service where

import ContingentClaims.Core.Claim (Claim)
import ContingentClaims.Core.Observation (Observation(..))
import ContingentClaims.Lifecycle.Lifecycle qualified as Lifecycle
import ContingentClaims.Lifecycle.Util (expiry, fixings, payoffs)
import ContingentClaims.Valuation.Stochastic (Expr)
import Daml.Finance.Claims.Util.Lifecycle qualified as Claim (lifecycle, lifecycleClaims, timeEvent)
import Daml.Finance.Interface.Holding.Holding qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Claims.Claim qualified as Claim (Claim, getClaims, GetClaims(..))
import Daml.Finance.Interface.Claims.Types (C, Pending, TaggedClaim)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Lifecycle.Observable.NumericObservable qualified as NumericObservable (I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Lifecycle (Claim, ClaimEffect(..), ClaimResult)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..))
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentKey(..))

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    replacementRuleCid : ContractId Lifecycle.I
    genericRuleCid : ContractId Lifecycle.I
    dynamicRuleCid : ContractId Lifecycle.I
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    
    nonconsuming choice PreviewLifecycle : ([TaggedClaim], [Pending])
      with
        today : Time
        observableCids : [ContractId NumericObservable.I]
        instrumentCid : ContractId Claim.Claim
      controller customer
      do
        instrument <- fetch instrumentCid
        claims <- exercise self GetCurrentClaims with instrumentCid; observableCids
        Claim.lifecycleClaims observableCids ((view instrument).acquisitionTime) claims [Claim.timeEvent today]

    nonconsuming choice SimulateLifecycle : [[Lifecycle.Pending Time InstrumentKey]]
      with
        today : Time
        prices : [Decimal]
        instrumentCid : ContractId Claim.Claim
      controller customer
      do
        instrument <- fetch instrumentCid
        taggedClaims <- Claim.getClaims instrument $ Claim.GetClaims with actor = customer
        let
          claim = mconcat $ map (.claim) taggedClaims
          simulate price = do
            result <- Lifecycle.lifecycle (\_ t -> pure price) claim today today
            pure result.pending
        mapA simulate prices

    nonconsuming choice GetCurrentClaims : [TaggedClaim]
      with
        instrumentCid : ContractId Claim.Claim
        observableCids : [ContractId NumericObservable.I]
      controller customer
      do
        hasClaims <- fetch instrumentCid
        instrument <- fetch (coerceContractId instrumentCid : ContractId Instrument.I)
        fst <$> Claim.lifecycle customer observableCids hasClaims [Claim.timeEvent (view instrument).validAsOf]

    nonconsuming choice Lifecycle : (Optional InstrumentKey, [ContractId Effect.I])
      with
        eventCid : ContractId Event.I
        instrument : InstrumentKey
        observableCids : [ContractId NumericObservable.I]
        ruleCid : ContractId Lifecycle.I
      controller customer
      do
        exercise ruleCid Lifecycle.Evolve with eventCid; observableCids; instrument

    nonconsuming choice LifecycleAndClaim : Lifecycle.ClaimResult
      with
        ctrl : Party
        eventCid : ContractId Event.I
        ruleCid : ContractId Lifecycle.I
        observableCids : [ContractId NumericObservable.I]
        instrument : InstrumentKey
        batchId : Id
        holdingCids : [ContractId Holding.I]
        claimRuleCid : ContractId Lifecycle.Claim
      controller ctrl
      do
        (instOpt, [effectCid]) <- exercise ruleCid Lifecycle.Evolve with eventCid; observableCids; instrument
        exercise claimRuleCid Lifecycle.ClaimEffect with claimer = ctrl; effectCid; batchId; holdingCids

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    replacementRuleCid : ContractId Lifecycle.I
    genericRuleCid : ContractId Lifecycle.I
    dynamicRuleCid : ContractId Lifecycle.I
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        replacementRuleCid : ContractId Lifecycle.I
        genericRuleCid : ContractId Lifecycle.I
        dynamicRuleCid : ContractId Lifecycle.I
      controller operator, provider
      do
        create Service with ..
